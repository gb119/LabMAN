"""
Django settings for LabMAN project.

Generated by 'django-admin startproject' using Django 1.8.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

"""Installed PyPI packages:
Django (1.9.2)
django-autocomplete-light (2.2.5)
django-colorful (1.1.0)
django-filebrowser (3.5.7)
django-gfklookupwidget (1.0.3)
django-grappelli (2.7.1)
django-rulez (1.0.2)
django-sitetree (1.4.0)
django-tinymce (2.0.4)
django-phonenumber-field 1.0.0
bleach
django-scheduler
django-email-obfuscator
django-bower
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
try:
    from ConfigParser import RawConfigParser
except ImportError: # Python 3 ?
    from configparser import RawConfigParser

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

config = RawConfigParser()
config.read(os.path.join(BASE_DIR,'settings.ini'))

DATABASE_USER = config.get('database', 'DATABASE_USER')
DATABASE_PASSWORD = config.get('database', 'DATABASE_PASSWORD')
DATABASE_HOST = config.get('database', 'DATABASE_HOST')
DATABASE_ENGINE = config.get('database', 'DATABASE_ENGINE')
DATABASE_NAME = config.get('database', 'DATABASE_NAME')

SECRET_KEY = config.get('security','SECRET_KEY')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django.contrib.contenttypes',
    'grappelli.dashboard',
    'grappelli',
    #'suit',
    'filebrowser', # django-filebrowser package
    'tinymce', # django-tinymce package
    'sitetree', # django-sitetree package
    'rulez', # django-rulez package
    'dal',
    'dal_select2',
    'django.contrib.admin',
    'django.contrib.auth',
    'accounts',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'colorful', # django-colorful package
    'email_obfuscator',
    'inplaceeditform',
    'djangobower',
    'schedule',
   'lm_utils', #provide support for things with category/tags
    'equipment',
    'img',
    'files',
    'pages',
    'locations',
)

LABMAN_APPS={
        "equipment":["Equipment"],
        "accounts":["Person"],
        "pages":["Page"],
        "locations":["Location"]
    }

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware'
)

ROOT_URLCONF = 'LabMAN.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR,"LabMAN","templates"),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                "django.core.context_processors.request",
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LabMAN.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': DATABASE_ENGINE,
        'NAME': DATABASE_NAME,
        'HOST': DATABASE_HOST,
        'USER': DATABASE_USER,
        'PASSWORD': DATABASE_PASSWORD,
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-gb'

TIME_ZONE = 'GMT'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/assets/'
STATIC_ROOT = os.path.join(BASE_DIR,"static")
STATICFILES_DIRS = [
    os.path.join(BASE_DIR,"LabMAN","static"), # global static files
]

MEDIA_ROOT = os.path.join(BASE_DIR,"media")
MEDIA_URL = "/media/"

# Flatpages

SITE_ID = 2

# Filebrowser for TinyMCE

FILEBROWSER_VERSIONS_BASEDIR = '_versions'
FILEBROWSER_DIRECTORY = ''

#TinyMCE editor for text areas

TINYMCE_DEFAULT_CONFIG = {
    'selector': 'textarea',
    'theme': 'modern',
    'plugins': 'link image preview codesample contextmenu table code advlist emoticons imagetools visualblocks',
    'toolbar1': 'bold italic underline | strikethorugh | superscript | subscript | styleselect |  fontselect | fontsizeselect | bullist numlist | outdent indent | table |',
    "toolbar2": 'alignleft aligncenter alignright alignjustify | link image | codesample | preview code',
    'contextmenu': 'formats | link image',
    'content_css' : '/assets/style/cm-style.css',
    'menubar': False,
    'inline': False,
    'statusbar': True,
    'height': 360,
}

TINYMCE_SPELLCHECKER = True
TINYMCE_COMPRESSOR = False
TINYMCE_JS_URL = '//cdn.tinymce.com/4/tinymce.min.js'

# Auth settings

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend', # Django's default auth backend
    'rulez.backends.ObjectPermissionBackend',
]

AUTH_USER_MODEL="accounts.Person"

BOWER_COMPONENTS_ROOT = os.path.join(BASE_DIR,"components")

BOWER_INSTALLED_APPS = (
    'jquery',
    'bootstrap'
)


GRAPPELLI_INDEX_DASHBOARD = 'LabMAN.dashboard.CustomIndexDashboard'


#INPLACEEDIT_EDIT_EMPTY_VALUE = 'Double click to edit'
#INPLACEEDIT_AUTO_SAVE = True
#INPLACEEDIT_EVENT = "dblclick"
#INPLACEEDIT_DISABLE_CLICK = True  # For inplace edit text into a link tag
#INPLACEEDIT_EDIT_MESSAGE_TRANSLATION = 'Write a translation' # transmeta option
#INPLACEEDIT_SUCCESS_TEXT = 'Successfully saved'
#INPLACEEDIT_UNSAVED_TEXT = 'You have unsaved changes'
#INPLACE_ENABLE_CLASS = 'enable'
#DEFAULT_INPLACE_EDIT_OPTIONS = {} # dictionnary of the optionals parameters that the templatetag can receive to change its behavior (see the Advanced usage section)
#DEFAULT_INPLACE_EDIT_OPTIONS_ONE_BY_ONE = True # modify the behavior of the DEFAULT_INPLACE_EDIT_OPTIONS usage, if True then it use the default values not specified in your template, if False it uses these options only when the dictionnary is empty (when you do put any options in your template)
#ADAPTOR_INPLACEEDIT_EDIT = 'app_name.perms.MyAdaptorEditInline' # Explain in Permission Adaptor API
#ADAPTOR_INPLACEEDIT = {'myadaptor': 'app_name.fields.MyAdaptor'} # Explain in Adaptor API
#INPLACE_GET_FIELD_URL = None # to change the url where django-inplaceedit use to get a field
#INPLACE_SAVE_URL = None # to change the url where django-inplaceedit use to save a field